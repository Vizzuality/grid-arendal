@function masonry-class($columns) {
  @return '#{$columns} .masonry-column.size-1of#{$columns}';
}

@mixin masonry-layout ($columns-screen-s, $columns-screen-m, $columns-screen-l, $columns-screen-xl, $item-padding, $item-padding-screen-m) {

  &[data-columns]::before {
    display: none;
  }

  @media screen and (max-width: $screen-s) {
    &[data-columns]::before {
      content: masonry-class($columns-screen-s);
    }
  }

  @media screen and (min-width: $screen-s + 1) and (max-width: $screen-m) {
    &[data-columns]::before {
      content: masonry-class($columns-screen-m);
    }
  }

  @media screen and (min-width: $screen-m + 1) and (max-width: $screen-l) {
    &[data-columns]::before {
      content: masonry-class($columns-screen-l);
    }
  }

  @media screen and (min-width: $screen-l + 1) {
    &[data-columns]::before {
      content: masonry-class($columns-screen-xl);
    }
  }

  .masonry-column { float: left; }

  .size-1of1 { width: 100%; }

  .size-1of2 { width: 50%; }

  .size-1of3 { width: 33.3%; }

  .size-1of4 { width: 25%; }

  .item {
    break-inside: avoid;
    padding: nth($item-padding, 1) nth($item-padding, 2) nth($item-padding, 3) nth($item-padding, 4);


  }
  @media screen and (min-width: $screen-m) {
    width: calc(100% + #{nth($item-padding-screen-m, 2)});

    .item {
      padding: nth($item-padding-screen-m, 1) nth($item-padding-screen-m, 2) nth($item-padding-screen-m, 3) nth($item-padding-screen-m, 4);
    }
  }
}

.masonry-1-1-2-3 {

  @include masonry-layout(1, 1, 2, 3,
    (rem(10px), rem(10px), rem(10px), 0),
    (rem(10px), rem(20px), rem(10px), 0)
  );
}

.masonry-1-1-2-4 {

  @include masonry-layout(1, 1, 2, 4,
    (rem(10px), rem(10px), rem(10px), 0),
    (rem(10px), rem(20px), rem(10px), 0)
  );
}

.masonry-1-1-3-4 {

  @include masonry-layout(1, 1, 3, 4,
    (0, 0, rem(20px), 0),
    (rem(8px), rem(20px), rem(12px), 0)
  );
}
